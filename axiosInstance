Sequential API Calls like below :
useEffect(() => {
  const fetchData = async () => {
    try {
      // First API call
      const response1 = await apiClient.get('/endpoint1');
      const data1 = response1.data;

      // Second API call, only after the first one succeeds
      const response2 = await apiClient.get('/endpoint2');
      const data2 = response2.data;

      // Third API call, only after the second one succeeds
      const response3 = await apiClient.get('/endpoint3');
      const data3 = response3.data;

      // Process the data from all three calls
      setData([data1, data2, data3]);
    } catch (error) {
      console.error('API call failed', error);
    }
  };

  fetchData();
}, []);


Parallel API Calls:
useEffect(() => {
  const fetchData = async () => {
    try {
      // Initiating all API calls simultaneously
      const [response1, response2, response3] = await Promise.all([
        apiClient.get('/endpoint1'),
        apiClient.get('/endpoint2'),
        apiClient.get('/endpoint3')
      ]);

      // Extracting data from all responses
      const data1 = response1.data;
      const data2 = response2.data;
      const data3 = response3.data;

      // Process the data from all three calls
      setData([data1, data2, data3]);
    } catch (error) {
      console.error('API call failed', error);
    }
  };

  fetchData();
}, []);




for both scenarios we can use the below functionality:

import axios from 'axios';

let isRefreshing = false;
let failedQueue = [];

const apiClient = axios.create({
  baseURL: 'https://api.example.com',
  headers: {
    'Content-Type': 'application/json',
  },
});

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

apiClient.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;

    if (error.response.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        return new Promise(function (resolve, reject) {
          failedQueue.push({ resolve, reject });
        })
          .then(token => {
            originalRequest.headers['Authorization'] = 'Bearer ' + token;
            return apiClient(originalRequest);
          })
          .catch(err => {
            return Promise.reject(err);
          });
      }

      originalRequest._retry = true;
      isRefreshing = true;

      return new Promise(function (resolve, reject) {
        refreshToken()
          .then(newToken => {
            apiClient.defaults.headers.common['Authorization'] = 'Bearer ' + newToken;
            originalRequest.headers['Authorization'] = 'Bearer ' + newToken;
            processQueue(null, newToken);
            resolve(apiClient(originalRequest));
          })
          .catch(err => {
            processQueue(err, null);
            reject(err);
          })
          .finally(() => {
            isRefreshing = false;
          });
      });
    }

    return Promise.reject(error);
  }
);

export default apiClient;

